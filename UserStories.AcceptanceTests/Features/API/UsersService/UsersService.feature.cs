// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UserStories.AcceptanceTests.Features.API.UsersService
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class UsersServiceFeature : Xunit.IClassFixture<UsersServiceFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "UsersService.feature"
#line hidden
        
        public UsersServiceFeature(UsersServiceFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UsersService", "    In order to test basic functionality\r\n    As a requester\r\n    I want to be co" +
                    "rrectly responsed", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Expected badges for users filtered by username coincidences at a certain period o" +
            "f time")]
        [Xunit.TraitAttribute("FeatureTitle", "UsersService")]
        [Xunit.TraitAttribute("Description", "Expected badges for users filtered by username coincidences at a certain period o" +
            "f time")]
        [Xunit.TraitAttribute("Category", "Type:API")]
        [Xunit.InlineDataAttribute("2019-03-04", "2019-03-05", "desc", "reputation", "Pavel Smirnov", new string[0])]
        public virtual void ExpectedBadgesForUsersFilteredByUsernameCoincidencesAtACertainPeriodOfTime(string fromDate, string toDate, string order, string sort, string inName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Type:API"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Expected badges for users filtered by username coincidences at a certain period o" +
                    "f time", null, @__tags);
#line 7
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "FromDate",
                        "ToDate",
                        "Order",
                        "Sort",
                        "InName"});
            table3.AddRow(new string[] {
                        string.Format("{0}", fromDate),
                        string.Format("{0}", toDate),
                        string.Format("{0}", order),
                        string.Format("{0}", sort),
                        string.Format("{0}", inName)});
#line 8
    testRunner.Given("The user gets a list of users with the following properties", ((string)(null)), table3, "Given ");
#line 11
    testRunner.And("The status code of the users service is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
    testRunner.Then("The amount of bronze badges are \'14\', silver are \'1\' and gold are \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Filtering with non existent username")]
        [Xunit.TraitAttribute("FeatureTitle", "UsersService")]
        [Xunit.TraitAttribute("Description", "Filtering with non existent username")]
        [Xunit.TraitAttribute("Category", "Type:API")]
        [Xunit.InlineDataAttribute("2019-03-04", "2019-03-05", "desc", "reputation", "notexisting_InName", new string[0])]
        public virtual void FilteringWithNonExistentUsername(string fromDate, string toDate, string order, string sort, string inName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Type:API"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtering with non existent username", null, @__tags);
#line 19
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "FromDate",
                        "ToDate",
                        "Order",
                        "Sort",
                        "InName"});
            table4.AddRow(new string[] {
                        string.Format("{0}", fromDate),
                        string.Format("{0}", toDate),
                        string.Format("{0}", order),
                        string.Format("{0}", sort),
                        string.Format("{0}", inName)});
#line 20
    testRunner.Given("The user gets a list of users with the following properties", ((string)(null)), table4, "Given ");
#line 23
    testRunner.And("The status code of the users service is \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
    testRunner.Then("The users response is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                UsersServiceFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                UsersServiceFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
